---
import "./controls.css";
---

<script>
	import YoutubePlayer from "yt-player";

	// Main ACNH Player
	const player = new YoutubePlayer("#player", {
		autoplay: true,
		keyboard: false,
		controls: false,
		annotations: false,
	});

	// Rain Player
	const rainPlayer = new YoutubePlayer("#player2", {
		autoplay: true,
		keyboard: false,
		controls: false,
		annotations: false,
	});

	const players = [rainPlayer, player];
	const feedback = document.getElementById("feedback");

	// general set up
	player.load("44MCworZf78");
	player.setVolume(100);

	// functions for controls
	function play() {
		players.forEach((ytplayer) => {
			ytplayer.unMute();
			ytplayer.play();
		});

		if (feedback) {
			feedback.innerHTML = "Playing...";
		}
	}
	function pause() {
		players.forEach((ytplayer) => {
			ytplayer.mute();
			ytplayer.pause();
		});

		if (feedback) {
			feedback.innerHTML = "Paused";
		}
	}
	function refreshGIF() {
		var feed = document.getElementById("feed");

		if (feed) {
			feed.setAttribute(
				"src",
				`./video-feed/bg_${parseInt(Math.random() * (8 - 1) + 1)}.gif`
			);
		}
	}

	function layerRain() {
		rainPlayer.load("q76bMs-NwRk", true);
		rainPlayer.setVolume(30);

		if (feedback) {
			feedback.innerHTML = "It started Raining...";
		}

		rainPlayer.on("ended", () => {
			layerRain();
		});
	}

	// event handling
	const controls = document.querySelectorAll("img.control");
	const volumeControls = document.querySelectorAll("#range");

	volumeControls.forEach((volumeControl) => {
		var volume: number;
		volumeControl.addEventListener("input", () => {
			volume = parseFloat(volumeControl.value);
			players.forEach((ytplayer) => {
				ytplayer.setVolume(volume / 2);
			});
			player.setVolume(volume);
		});
	});

	// Handle clicks on each button.
	controls.forEach((control) => {
		control.addEventListener("click", () => {
			switch (control.id) {
				case "pause":
					pause();
					break;
				case "play":
					play();
					break;
				case "refresh":
					refreshGIF();
					break;
				case "layerRain":
					if (rainPlayer.getDuration() <= 0 || !rainPlayer.getDuration()) {
						layerRain();
					} else if (
						rainPlayer.getState() == "paused" ||
						rainPlayer.getState() == "unstarted" ||
						rainPlayer.getState() == "buffering"
					) {
						rainPlayer.play();
						if (feedback) {
							feedback.innerHTML = "It started raining...";
						}
					} else {
						rainPlayer.pause();
						if (feedback) {
							feedback.innerHTML = "The rain is gone...";
						}
					}
					break;
				default:
					null;
			}
		});

		// MouseOver Flairs
		control.addEventListener("mouseover", () => {
			switch (control.id) {
				case "pause":
					if (feedback) {
						feedback.innerHTML =
							"<span class='feedback'>Press to Pause...</span>";
					}
					break;
				case "play":
					if (feedback) {
						feedback.innerHTML =
							"<span class='feedback'>Press to Play...</span>";
					}
					break;
				case "refresh":
					if (feedback) {
						feedback.innerHTML =
							"<span class='feedback'>Press to Shuffle GIF...</span>";
					}
					break;
				case "layerRain":
					if (feedback) {
						feedback.innerHTML =
							"<span class='feedback'>Press to add Rain sound layer...</span>";
					}
					break;
			}
		});
	});

	// match current time to music
	var today = new Date();
	var timeHours = today.getHours();

	function updateVideo(autoplay: boolean) {
		function autoPlay(video: string) {
			player.load(video, autoplay);
		}

		switch (timeHours) {
			case 0:
				autoPlay("V_9Nfwk9yWo");
				break;
			case 1:
				autoPlay("E-GeGj9eD_Y");
				break;
			case 2:
				autoPlay("xJMbtElUepc");
				break;
			case 3:
				autoPlay("Otx87vJ4M1Y");
				break;
			case 4:
				autoPlay("M2aRoiXBU2I");
				break;
			case 5:
				autoPlay("u_VzHJW3HZc");
				break;
			case 6:
				autoPlay("yQ7dheIA96A");
				break;
			case 7:
				autoPlay("5CamjNTPZus");
				break;
			case 8:
				autoPlay("EAp1h3pHa_c");
				break;
			case 9:
				autoPlay("A6wCdDn-HzA");
				break;
			case 10:
				autoPlay("wU7_1ZcjjPc");
				break;
			case 11:
				autoPlay("rHHJpZQe3M0");
				break;
			case 12:
				autoPlay("zxkVYPjhdaM");
				break;
			case 13:
				autoPlay("_1tBg0-8bFI");
				break;
			case 14:
				autoPlay("uzSuYtVZ764");
				break;
			case 15:
				autoPlay("2Dkm3D4ep8w");
				break;
			case 16:
				autoPlay("yeYxyorD-B8");
				break;
			case 17:
				autoPlay("vc1zlXMyZow");
				break;
			case 18:
				autoPlay("TNpieyL1Tt4");
				break;
			case 19:
				autoPlay("iv7Xg2b1Sig");
				break;
			case 20:
				autoPlay("xycWcS8G0EU");
				break;
			case 21:
				autoPlay("LXhG5Lajj7I");
				break;
			case 22:
				autoPlay("DrQSk1Pch8w");
				break;
			case 23:
				autoPlay("QC5Y4TvkMIo");
				break;
			default:
				null;
		}
	}

	// Used for displaying a clock
	var pastHour: any;
	var timeMonth, timeDay, timeYear, timeMinutes;
	var visualDate = document.getElementById("locale-date");
	var visualTime = document.getElementById("locale-time");

	function updateTime() {
		today = new Date();
		timeMonth = today.getMonth();
		timeDay = today.getDay();
		timeYear = today.getFullYear();

		timeHours = today.getHours();
		timeMinutes = today.getMinutes();

		// update video
		if (pastHour != timeHours) {
			const isPlaying = player.getState() === "playing";
			updateVideo(isPlaying);
		}
	}

	function refreshClock() {
		// refresh visual clock
		var newDate = today.toLocaleDateString([], {
			weekday: "long",
			year: "numeric",
			month: "long",
			day: "numeric",
		});
		var newTime = today.toLocaleTimeString([], {
			hour: "2-digit",
			minute: "2-digit",
		});
		if (visualDate && newDate != visualDate.innerHTML) {
			visualDate.innerHTML = newDate;
		}
		if (visualTime && newTime != visualTime.innerHTML) {
			visualTime.innerHTML = newTime;
		}
	}

	refreshClock();
	updateTime();
	updateVideo(false);

	// when animal crossing video ends
	player.on("ended", () => {
		updateVideo(true);
	});

	// every second
	setInterval(() => {
		pastHour = timeHours;
		updateTime();
	}, 1000);

	// every minute
	setInterval(() => {
		refreshClock();
	}, 60000);
</script>

<div class="player-controls">
	<div class="hidden">
		<div loop="1" id="player"></div>
		<div loop="1" id="player2"></div>
	</div>
	<div class="ctrl-wrapper">
		<img class="control" id="pause" src="./player-controls/pause.svg" />
		<img class="control" id="play" src="./player-controls/play.svg" />
		<img class="control" id="refresh" src="./player-controls/refresh.svg" />
		<img class="control" id="layerRain" src="./player-controls/rain.svg" />
	</div>
	<p id="feedback">
		Press to Play Manually. <span style="color: red;"
			>Make sure browser autoplay is turned on.</span
		>
	</p>

	<div class="right-ctrl">
		<input
			type="range"
			min="1"
			max="100"
			value="100"
			step="5"
			autocomplete="off"
			class="slider"
			id="range"
		/>
	</div>
</div>
